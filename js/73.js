"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[73],{4073:(t,s,e)=>{e.r(s),e.d(s,{NativeAudio:()=>r,NativeAudioWeb:()=>i});var a=e(9895);class o{constructor(t){this.audio=t}}class i extends a.Uw{constructor(){super()}async resume(t){const s=this.getAudioAsset(t.assetId).audio;if(s.paused)return s.play()}async pause(t){return this.getAudioAsset(t.assetId).audio.pause()}async getCurrentTime(t){return{currentTime:this.getAudioAsset(t.assetId).audio.currentTime}}async getDuration(t){const s=this.getAudioAsset(t.assetId).audio;if(Number.isNaN(s.duration))throw"no duration available";if(!Number.isFinite(s.duration))throw"duration not available => media resource is streaming";return{duration:s.duration}}async configure(t){throw`configure is not supported for web: ${JSON.stringify(t)}`}async preload(t){var s;if(i.AUDIO_ASSET_BY_ASSET_ID.has(t.assetId))throw"AssetId already exists. Unload first if like to change!";if(!(null===(s=t.assetPath)||void 0===s?void 0:s.length))throw"no assetPath provided";if(!t.isUrl&&!new RegExp("^/?"+i.FILE_LOCATION).test(t.assetPath)){const s=t.assetPath.startsWith("/")?"":"/";t.assetPath=`${i.FILE_LOCATION}${s}${t.assetPath}`}const e=new Audio(t.assetPath);e.autoplay=!1,e.loop=!1,e.preload="auto",t.volume&&(e.volume=t.volume),i.AUDIO_ASSET_BY_ASSET_ID.set(t.assetId,new o(e))}async play(t){var s;const e=this.getAudioAsset(t.assetId).audio;return await this.stop(t),e.loop=!1,e.currentTime=null!==(s=t.time)&&void 0!==s?s:0,e.play()}async loop(t){const s=this.getAudioAsset(t.assetId).audio;return await this.stop(t),s.loop=!0,s.play()}async stop(t){const s=this.getAudioAsset(t.assetId).audio;s.pause(),s.loop=!1,s.currentTime=0}async unload(t){await this.stop(t),i.AUDIO_ASSET_BY_ASSET_ID.delete(t.assetId)}async setVolume(t){if("number"!=typeof(null==t?void 0:t.volume))throw"no volume provided";this.getAudioAsset(t.assetId).audio.volume=t.volume}async setRate(t){if("number"!=typeof(null==t?void 0:t.rate))throw"no rate provided";this.getAudioAsset(t.assetId).audio.playbackRate=t.rate}async isPlaying(t){return{isPlaying:!this.getAudioAsset(t.assetId).audio.paused}}getAudioAsset(t){if(this.checkAssetId(t),!i.AUDIO_ASSET_BY_ASSET_ID.has(t))throw`no asset for assetId "${t}" available. Call preload first!`;return i.AUDIO_ASSET_BY_ASSET_ID.get(t)}checkAssetId(t){if("string"!=typeof t)throw"assetId must be a string";if(!(null==t?void 0:t.length))throw"no assetId provided"}}i.FILE_LOCATION="",i.AUDIO_ASSET_BY_ASSET_ID=new Map;const r=new i}}]);
//# sourceMappingURL=73.js.map